＃部署算法研究
部署算法已表现出对各种动态和离散优化问题优异性能。解释为近似的动态规划算法，一个推出AL- gorithm估计值到走在每个决策阶段通过模拟未来事件以下一贪心策略而称为基策略。虽然在很多情况下推出的算法，保证执行以及它们的基本政策，已经出现了一些理论成果显示性能额外的改善。在本文中，我们进行了子集和问题，背包问题的概率分析，给出理论的证据表明，部署算法进行严格比他们的基地的政策更好。使用从现有文献的随机模型，我们分析，我们称之为连续部署和详尽的部署2部署方法，这两者采用简单的贪婪基地的政策。该子集和问题，我们证明了部署算法的仅一个单次迭代后，这两种方法得到至少在溶液值和容量，相对于底座策略之间的期望间隙减少了30％。类似的结果显示为背包问题。
我们直接使用的随机模型从已经被用于研究多种贪婪文献
该子集和问题的算法[5]。扩展该模型以自然的方式为我们的背包问题的分析。我们分析，我们称之为连续部署和详尽的部署，它们都使用相同的基本策略中的两个部署技术。依次第一算法处理的物品，并在每一次迭代，如果当前项应该被添加到背包决定。在详尽部署的每次迭代，算法决定哪个可用的项目之一，应加入到背包。该基地的政策是一个简单的贪心算法，直到不可行的项目中遇到的项目增加
##连续推出
 - 算法思路
 在连续-转出算法示于算法2这种算法作为输入项的权重Wi和容量为b的顺序，并使得调用盲贪婪作为子程序。对在迭代i，则算法计算添加项目i的溶液，使用的值（U +）盲贪婪
 其余的项目，并且不添加项添加到溶液，并使用盲贪婪其后的值（U盘）。该项目被添加到该溶液仅当前估值（U +）较大。
 算法连续2首展输入：项目重序列加权像在哪里= 1。 。 。 ，N 2，容量B。输出：可行的解决方案序列S，价值U.
 1：初始化S←??，剩下的项目序列我←I，B←B，ü←0。 2：对于i = 1到n（每个项目）做
 3：
 估计将项目i的值，（·，U +）=盲贪婪（I，B）。
 4：
 估计跳绳项目i的值，（·，U盘）=盲贪婪（I \？我？B）。
 5：
 如果U +> U-（估计值增加的项目为大），然后
 6：
 添加项目到我解序列，S←S：我？
 7：
 更新剩余容量，B←B-无线网络，和值，U←U + PI。
 8：
 如果结束
 9：
 从remaning项目序列中删除我的项目，我←I \？我？
 10：结束11：返回S，U.
 我们只专注于算法的第一次迭代的结果;从第一次迭代边界是
 有效期为未来iterations3。连续-转出的单次迭代有效地采取了最好的两个解决方案，盲目贪婪和解决方案获得一个使用后盲获得贪婪
 去除第一项。令V *（n）表示由推出算法的子集和问题的随机模型下n个项目的单次迭代所获得的间隙。
  - 边界分析

##无遗部署
 - 算法思路



 穷举，分装算法如图3算法它作为输入的物品重量Wi和容量B序列。在每次迭代中，用t索引，该算法考虑在现有的顺序一它计算由移动每个项目序列的前部，施加致盲贪婪算法得到的值的所有项目。然后，该算法具有最高估计值添加项（如果它存在）到溶液中。我们暗含的假设一致的打破平局方法，如该项目优先考虑以最低的指数。下一次迭代，然后用物品的其余序列前进。再次，我们只考虑第一次迭代中，它试图用盲贪婪移动每个项目后，
 前面的序列，并以最佳的这些解决方案。这给出了一个上界的子集和间隙和一个下界背包问题增益从额外的迭代以下。对于
 子集和问题，让V *（n）表示穷举卷展栏上n项随机模型的单次迭代后获得的差距。我们有以下的界限。

 算法力竭3首展
 输入：重量序列加权像其中I = 1，？。 。 。 ，N 2，容量B。输出：可行的解决方案序列S，价值U.
 1：初始化S←??，我←我，B←B，ü←0。 2：T = 1到n做3：
 因为我∈我（在remaning项目序列的每个项目）做
 4：
 让㈡表示序列我其中i移动到第一位置。
 5：
 序列的估计值，（·，UI）=盲贪婪（WII
 ，B）。
 6：
 为结束
 7：
 如果马克西UI> 0，则
 8：
 确定与最大估计值项，I *←argmaxi UI。
 9：
 添加项目i *要解序列，S←S：？？I *？我←I \ I *？
 10：
 更新剩余容量，B←B-无线网络，和值，U←U + PI。
 11：
 如果结束
 12：结束13：返回S，U.
 0.4
  - 边界分析


  我们已经显示了强大的性能边界为连续推出并在子集sumproblem和背包问题详尽的部署技术。只有一个迭代后这些结果，并举行边界提供额外的迭代。仿真结果表明，这些界限是非常接近的比较单次迭代的实现性能。我们提出的结果表征渐进行为（渐进相对于项目的总人数）均推出技术这两个问题的预期性能。

  在今后的工作中一个有趣的方向是要考虑推出算法的第二次迭代。该
  的部署算法在[4]的背包问题最坏情况的分析表明，在运行一次迭代的结果的显着改善，但它不可能保证额外改进与用于给定基本政策更多的迭代。这种行为是一般不会在实践中[2]观察，并没有在平均的情况下的限制。一个相关的议题是仍考虑部署算法只是第一次迭代，但具有较大的超前长度（如试图对所有项目进行了详尽的部署，而不仅仅是单独的每个项）。最后，理想的是有理论结果为更复杂的问题。研究问题与多维状态空间是有吸引力的，因为这些都是在那里部署技术经常使用，并且在实践中表现良好的问题的类型。在这个方向，这将是有益的考虑问题，如装箱问题，多背包问题，以及多维背包问题。
